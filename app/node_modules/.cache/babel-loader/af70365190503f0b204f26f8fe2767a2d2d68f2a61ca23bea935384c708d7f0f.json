{"ast":null,"code":"import { VOID, PRIMITIVE, ARRAY, OBJECT, DATE, REGEXP, MAP, SET, ERROR, BIGINT } from './types.js';\nconst EMPTY = '';\nconst {\n  toString\n} = {};\nconst {\n  keys\n} = Object;\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value) return [PRIMITIVE, type];\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n  if (asString.includes('Array')) return [ARRAY, asString];\n  if (asString.includes('Error')) return [ERROR, asString];\n  return [OBJECT, asString];\n};\nconst shouldSkip = _ref => {\n  let [TYPE, type] = _ref;\n  return TYPE === PRIMITIVE && (type === 'function' || type === 'symbol');\n};\nconst serializer = (strict, json, $, _) => {\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n  const pair = value => {\n    if ($.has(value)) return $.get(value);\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE:\n        {\n          let entry = value;\n          switch (type) {\n            case 'bigint':\n              TYPE = BIGINT;\n              entry = value.toString();\n              break;\n            case 'function':\n            case 'symbol':\n              if (strict) throw new TypeError('unable to serialize ' + type);\n              entry = null;\n              break;\n            case 'undefined':\n              return as([VOID], value);\n          }\n          return as([TYPE, entry], value);\n        }\n      case ARRAY:\n        {\n          if (type) {\n            let spread = value;\n            if (type === 'DataView') {\n              spread = new Uint8Array(value.buffer);\n            } else if (type === 'ArrayBuffer') {\n              spread = new Uint8Array(value);\n            }\n            return as([type, [...spread]], value);\n          }\n          const arr = [];\n          const index = as([TYPE, arr], value);\n          for (const entry of value) arr.push(pair(entry));\n          return index;\n        }\n      case OBJECT:\n        {\n          if (type) {\n            switch (type) {\n              case 'BigInt':\n                return as([type, value.toString()], value);\n              case 'Boolean':\n              case 'Number':\n              case 'String':\n                return as([type, value.valueOf()], value);\n            }\n          }\n          if (json && 'toJSON' in value) return pair(value.toJSON());\n          const entries = [];\n          const index = as([TYPE, entries], value);\n          for (const key of keys(value)) {\n            if (strict || !shouldSkip(typeOf(value[key]))) entries.push([pair(key), pair(value[key])]);\n          }\n          return index;\n        }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP:\n        {\n          const {\n            source,\n            flags\n          } = value;\n          return as([TYPE, {\n            source,\n            flags\n          }], value);\n        }\n      case MAP:\n        {\n          const entries = [];\n          const index = as([TYPE, entries], value);\n          for (const [key, entry] of value) {\n            if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry)))) entries.push([pair(key), pair(entry)]);\n          }\n          return index;\n        }\n      case SET:\n        {\n          const entries = [];\n          const index = as([TYPE, entries], value);\n          for (const entry of value) {\n            if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));\n          }\n          return index;\n        }\n    }\n    const {\n      message\n    } = value;\n    return as([TYPE, {\n      name: type,\n      message\n    }], value);\n  };\n  return pair;\n};\n\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\n\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} value a serializable value.\r\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\r\n *  if `true`, will not throw errors on incompatible types, and behave more\r\n *  like JSON stringify would behave. Symbol and Function will be discarded.\r\n * @returns {Record[]}\r\n */\nexport const serialize = function (value) {\n  let {\n    json,\n    lossy\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map(), _)(value), _;\n};","map":{"version":3,"names":["VOID","PRIMITIVE","ARRAY","OBJECT","DATE","REGEXP","MAP","SET","ERROR","BIGINT","EMPTY","toString","keys","Object","typeOf","value","type","asString","call","slice","includes","shouldSkip","_ref","TYPE","serializer","strict","json","$","_","as","out","index","push","set","pair","has","get","entry","TypeError","spread","Uint8Array","buffer","arr","valueOf","toJSON","entries","key","toISOString","source","flags","message","name","serialize","lossy","arguments","length","undefined","Map"],"sources":["E:/NEW/frontend-for-annaforces/app/node_modules/@ungap/structured-clone/esm/serialize.js"],"sourcesContent":["import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst EMPTY = '';\r\n\r\nconst {toString} = {};\r\nconst {keys} = Object;\r\n\r\nconst typeOf = value => {\r\n  const type = typeof value;\r\n  if (type !== 'object' || !value)\r\n    return [PRIMITIVE, type];\r\n\r\n  const asString = toString.call(value).slice(8, -1);\r\n  switch (asString) {\r\n    case 'Array':\r\n      return [ARRAY, EMPTY];\r\n    case 'Object':\r\n      return [OBJECT, EMPTY];\r\n    case 'Date':\r\n      return [DATE, EMPTY];\r\n    case 'RegExp':\r\n      return [REGEXP, EMPTY];\r\n    case 'Map':\r\n      return [MAP, EMPTY];\r\n    case 'Set':\r\n      return [SET, EMPTY];\r\n    case 'DataView':\r\n      return [ARRAY, asString];\r\n  }\r\n\r\n  if (asString.includes('Array'))\r\n    return [ARRAY, asString];\r\n\r\n  if (asString.includes('Error'))\r\n    return [ERROR, asString];\r\n\r\n  return [OBJECT, asString];\r\n};\r\n\r\nconst shouldSkip = ([TYPE, type]) => (\r\n  TYPE === PRIMITIVE &&\r\n  (type === 'function' || type === 'symbol')\r\n);\r\n\r\nconst serializer = (strict, json, $, _) => {\r\n\r\n  const as = (out, value) => {\r\n    const index = _.push(out) - 1;\r\n    $.set(value, index);\r\n    return index;\r\n  };\r\n\r\n  const pair = value => {\r\n    if ($.has(value))\r\n      return $.get(value);\r\n\r\n    let [TYPE, type] = typeOf(value);\r\n    switch (TYPE) {\r\n      case PRIMITIVE: {\r\n        let entry = value;\r\n        switch (type) {\r\n          case 'bigint':\r\n            TYPE = BIGINT;\r\n            entry = value.toString();\r\n            break;\r\n          case 'function':\r\n          case 'symbol':\r\n            if (strict)\r\n              throw new TypeError('unable to serialize ' + type);\r\n            entry = null;\r\n            break;\r\n          case 'undefined':\r\n            return as([VOID], value);\r\n        }\r\n        return as([TYPE, entry], value);\r\n      }\r\n      case ARRAY: {\r\n        if (type) {\r\n          let spread = value;\r\n          if (type === 'DataView') {\r\n            spread = new Uint8Array(value.buffer);\r\n          }\r\n          else if (type === 'ArrayBuffer') {\r\n            spread = new Uint8Array(value);\r\n          }\r\n          return as([type, [...spread]], value);\r\n        }\r\n\r\n        const arr = [];\r\n        const index = as([TYPE, arr], value);\r\n        for (const entry of value)\r\n          arr.push(pair(entry));\r\n        return index;\r\n      }\r\n      case OBJECT: {\r\n        if (type) {\r\n          switch (type) {\r\n            case 'BigInt':\r\n              return as([type, value.toString()], value);\r\n            case 'Boolean':\r\n            case 'Number':\r\n            case 'String':\r\n              return as([type, value.valueOf()], value);\r\n          }\r\n        }\r\n\r\n        if (json && ('toJSON' in value))\r\n          return pair(value.toJSON());\r\n\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const key of keys(value)) {\r\n          if (strict || !shouldSkip(typeOf(value[key])))\r\n            entries.push([pair(key), pair(value[key])]);\r\n        }\r\n        return index;\r\n      }\r\n      case DATE:\r\n        return as([TYPE, value.toISOString()], value);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as([TYPE, {source, flags}], value);\r\n      }\r\n      case MAP: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const [key, entry] of value) {\r\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\r\n            entries.push([pair(key), pair(entry)]);\r\n        }\r\n        return index;\r\n      }\r\n      case SET: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const entry of value) {\r\n          if (strict || !shouldSkip(typeOf(entry)))\r\n            entries.push(pair(entry));\r\n        }\r\n        return index;\r\n      }\r\n    }\r\n\r\n    const {message} = value;\r\n    return as([TYPE, {name: type, message}], value);\r\n  };\r\n\r\n  return pair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} value a serializable value.\r\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\r\n *  if `true`, will not throw errors on incompatible types, and behave more\r\n *  like JSON stringify would behave. Symbol and Function will be discarded.\r\n * @returns {Record[]}\r\n */\r\n export const serialize = (value, {json, lossy} = {}) => {\r\n  const _ = [];\r\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}